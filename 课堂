 1.               #include <iostream>
                  using namespace std;
                  int main()
                  {
                    int a,b,c;
                    a=10;
                    b=0110;
                    c=0x111;
                    cout<<"a="<<a<<endl;
                    cout<<"b="<<b<<endl;
                    cout<<"c="<<c<<endl;
                    return 0;
                  }
                  
                  
                  
                  
                  
                  
2.                #include <iostream>
                  using namespace std;
                  int main()
                  {
                    short int a=-1;
                    unsigned short b;
                    b=a;
                    cout<<"b="<<b<<endl;
                    return 0;
                  }
                  
                  
                  
                  
                  
                  
3.                #include <iostream>
                  using namespace std;
                  int main()
                  {
                    float a,b;
                    double c,d;
                    a=0.00001000000000000000000000001;
                    b=13.111111111111111111111111;
                    c=19.1111111111111111111111111111;
                    d=31111;
                    cout<<"a="<<a<<'\t'<<"b="<<b<<endl;
                    cout<<"c="<<c<<'\t'<<"d="<<d<<endl;
                    return 0;
                  }  
                  
                  
                  
                  
                  
4.                #include <iostream>
                  using namespace std;
                  int main()
                  {
                    cout<<"c:\tc\tc"<<'\n';
                    cout<<"c:\\tc\\tc"<<'\n';
                    return 0; 
                  }  
                  
                  
                  
5.                #include <iostream>
                  using namespace std;
                  int main()
                  {
                    char a,b;
                    a='A';
                    b='\x61';
                    cout<<a<<'\t'<<b<<endl;
                    return 0;
                  }   
                  
                  
                  
                  
6.                 #include <iostream>
                    using namespace std;
                    int main()
                    {
                      char a,b;
                      a='R';
                      b=a+32;
                      cout<<a<<'\n'<<b<<endl;
                      return 0;
                    }
                    
                    
                    
7.                  #include <iostream>
                    using namespace std;
                    int main()
                    {
                      char a;
                      a='a';
                      cout<<a<<endl;
                      cout<<a+1<<endl;
                      return 0;
                    }                    
                  
                  
8.                   #include <iostream>
                      using namespace std;
                      int main()
                      {
                        int a;
                        double b=0.16374;
                        a=b;
                        cout<<"a="<<a<<endl;
                        return 0;
                      }
                      
                      
                      
                      
                      
9.                    #include <iostream>
                      using namespace std;
                      int main ()
                      {
                        char a=256;
                        unsigned int b=a+0;
                        cout<<"b="<<b<<endl;
                        return 0;
                      }   
                      
                      
                      
10.                   #include <iostream>;
                      using namespace std;
                      int main()
                      {
                        unsigned char a=255;
                        int b;
                        b=a;
                        cout<<"b="<<b<<endl;
                        return 0;
                      }              
                      
                      
                      
                      
11.                   #include <iostream>
                      using namespace std;
                      int main()
                      {
                        char a=254;
                        int b;
                        b=a;
                        cout<<"b="<<b<<endl;
                        return 0;
                      }      
                      
                      
                      
                      
12.                   #include <iostream>
                      using namespace std;
                      int main()
                      {
                        float y=5.5;
                        int x;
                        x=int(y);
                        cout<<"x="<<x<<'\n'<<"y="<<y<<endl;
                        return 0;
                      }                       
           
           
           
           
 13.		        ＃include <stdio.h>	
              using namespace std;
              int main（）	
              {	
                  int a = 0;	

                  printf（“请输入金额（元）：”）;	
                  scanf（“％d”，＆a）;	

                  int b = 100-a;	
                  printf（“应找您％d元\ n ”，b）;	

                  0;	
              }




14.	            	#include <stdio.h>
                 int max(int x,int y)
                 {
                  int z;
                  if(x>y)z=x;
                  else z=y;
                  return(z);
                 }
                 int main()
                 {
                  int a,b,c;
                  scanf("%d,%d",&a,&b);
                  c=max (a,b);
                  printf("更大的是%d",c);
                  return 0;	
                  }




15.	             	#include<iostream>
                  using namespace std;
                  int main()
                  {
                   int a,b,c,d;
                   cin>>a>>b;
                   c=a+b;
                   cout<<"d="<<c;
                  }




16.            #include <iostream>
              using namespace std;
              int main()
              {
                int grade;
                cout<<"输入成绩："<<endl;
                cin>>grade;
                cout<<"等级；"<<endl;
                switch(grade/10)
                {
                case 10:
                case 9:cout<<"优秀";break;
                case 8:cout<<"良好";break;
                case 7:cout<<"中等";break;
                case 6:cout<<"及格";break;
                defalt:cout<<"不及格";
                }
                return 0;
              }
              
              
              
17.              #include <iostream>
                using namespace std;
                int main()
                {
                  char a;
                  cout<<"请输入；"<<endl;
                  cin>>a;
                  a=(a>='A'&&a<='Z')?(a+32):a;
                  cout<<a<<endl;
                  return 0;
                }
                
                
                
                
18.              #include <iostream>
                #include <cmath>
                using namespace std;
                int main()
                {
                  float a,b,c,delta;
                  cout<<"请输入三个系数："<<endl;
                  cin>>a>>b>>c;
                  cout<<"a="<<a<<'\t'<<"b="<<b<<'\t'<<"c="<<c<<endl;
                  delta=b*b-4*a*c;
                  if (delta<0)
                  cout<<"方程无实根"<<endl;
                  else 
                  {
                  delta=sqrt(delta);
                    if (delta)
                    {	cout<<"方程有两个不同实根"<<endl;
                      cout<<"x1="<<(-b+delta/2/a)<<endl;
                      cout<<"x2="<<(-b-delta/2/a)<<endl;
                    }
                    else
                    {
                    cout<<"方程有两个相等实根"<<endl;
                    cout<<"x1=x2="<<(-b/2/a)<<endl;
                    }
                    return 0;
                  }
                 }        
                 
                 
                 
                 
19.                #include <iostream>
                  using namespace std;
                  int main()
                  {
                    char c;
                    cout<<"请输入："<<endl;
                    cin.get(c);
                    if(c<32)
                    cout<<"控制字符"<<endl;
                    else if(c>='0'&&c<='9')
                    cout<<"数字字符"<<endl;
                    else if(c>='A'&&c<='Z')
                    cout<<"大写字母"<<endl;
                    else if(c>='a'&&c<='z')
                    cout<<"小写字母"<<endl;
                    else
                    cout<<"其他字符"<<endl;
                    return 0;
                  }   
                  
                  
                  
20.                  #include <iostream>
                    using namespace std;
                    int main()
                    {
                      int a,b,c,t;
                      cout<<"请输入："<<endl;
                      cin>>a>>b>>c;
                      cout<<"a="<<a<<'\n'<<"b="<<b<<'\n'<<"c="<<c<<endl;
                      if(a>b)t=b;
                      else t=a;
                      cout<<"最小的数是；"<<endl;
                      if(c>t)
                      cout<<t<<endl;
                      else
                      cout<<c<<endl;
                      return 0; 
                    }     
                    
                    
                    
                    
21.                    #include <iostream>
                      using namespace std;
                      int main()
                      {
                        float a,b,c;
                        cout<<"请输入；"<<endl;
                        cin>>a>>b;
                        if(a>b)
                        {
                          c=a,a=b,b=c;
                        }
                        cout<<a<<'\n'<<b<<endl;
                        return 0;
                      }        
                      
                      
                      
22.                      #include <iostream>
                        using namespace std;
                        int main()
                        {
                          float a,b;
                          char op;
                          cout<<"请输入算式：（数1 运算符 数2）"<<endl;
                          cin>>a>>op>>b;
                          switch (op)
                          {
                            case '+':cout<<a<<op<<b<<"="<<a+b<<endl;break;
                            case '-':cout<<a<<op<<b<<"="<<a-b<<endl;break;
                            case '*':cout<<a<<op<<b<<"="<<a*b<<endl;break;
                            case '/':if (b)
                                 {cout<<a<<op<<b<<"="<<a/b<<endl;break;}
                                 else
                                 {cout<<"错误，除数为0"<<endl;break;}
                            defalt:cout<<"符号无效"<<endl;
                          }
                          return 0;
                        }                      



23.冒泡法！！！！！           #include <iostream>
                            using namespace std;
                            int sort(int a[],int n)
                            {
                             int t;
                             for (int i=0;i<n-1;i++)
                             {
                              for (int k=0;k<n-i-1;k++)
                              {
                               if (a[k]>a[k+1])
                               {
                                t=a[k+1];
                                a[k+1]=a[k];
                                a[k]=t;
                               }
                              }
                             }
                             } 
                             int main()
                             {
                              int n;
                              cin>>n;
                              int a[n];
                              for (int i=0;i<n;i++)
                              {
                               cin>>a[i];
                              }
                              sort(a,n);
                              for (int i=0;i<n;i++)
                              cout<<a[i]<<" ";
                             return 0;
                             }




24.                        #include <bits/stdc++.h>
                           using namespace std;
                           int main()
                           {
                            int a[5];
                            for (int i=0;i<5;i++)
                            {
                             cin>>a[i];
                            }
                            for (int i=4;i>=0;i--)
                            cout<<a[i]<<'\t';
                            return 0;
                            } 




25.                         #include <bits/stdc++.h>
                            using namespace std;
                            int main()
                            {
                             int a[100],maxi=0,n;
                             cin>>n;
                             for (int i=0;i<n;i++)
                             {
                              cin>>a[i];
                              maxi=max(a[i],maxi);
                             }
                             cout<<maxi;
                             return 0;
                            }




26.                       #include <bits/stdc++.h>
                          using namespace std;
                          int main()
                          {
                           int a[10],t;
                           for (int i=0;i<10;i++)
                           cin>>a[i];
                           for (int i=0;i<9;i++)
                           {
                            for (int k=0;k<9-i;k++)
                            {
                             if (a[k]>a[k+1])
                             {
                              t=a[k+1];
                              a[k+1]=a[k];
                              a[k]=t;
                             }
                            }
                           }
                           for (int i=0;i<10;i++)
                           cout<<a[i]<<'\t';
                           return 0;
                          }




27.                       #include <bits/stdc++.h>
                          using namespace std;
                          int main()
                          {
                           int a[7]={12,43,5,54,4,365,56},n,j=0;
                           cout<<"原数组：";
                           for (int i=0;i<7;i++)
                           cout<<a[i]<<'\t';
                           cout<<"输入删除数据：";
                           cin>>n; 
                           for (int i=0;i<7;i++)
                           {
                            if(a[i]==n)
                            {
                             for (int k=i;k<7;k++)
                             a[k]=a[k+1];
                             break;
                            }
                            j++;
                           }
                           if(j==7)
                           cout<<"删除数据不存在。";
                           else
                           {
                            cout<<"删除后的数组：";
                            for (int i=0;i<6;i++)
                            {
                             cout<<a[i]<<'\t';
                            }
                           }
                           return 0;
                          }



28.             #include <iostream>
                using namespace std;
                int main()
                {
                 int a[3][3],mini=100000;

                 for (int i=0;i<3;i++)
                 {
                  for (int k=0;k<3;k++)
                  {
                   cin>>a[i][k];
                   mini=min(a[i][k],mini);
                  }
                 }
                 cout<<mini;
                 return 0;
                }




29.             #include <iostream>
                using namespace std;
                int main()
                {
                 int a[3][3],b[3][3];
                 for (int i=0;i<3;i++)
                 {
                  for (int k=0;k<3;k++)
                  {
                   cin>>a[i][k];
                  }
                 }
                  for (int i=0;i<3;i++)
                 {
                  for (int k=0;k<3;k++)
                  {
                   cout<<a[i][k]<<'\t';
                  }
                  cout<<'\n';
                 }
                 cout<<'\n';
                 for (int n=0;n<3;n++)
                 {
                  for (int m=0;m<3;m++)
                  {
                   b[n][m]=a[m][n];
                   cout<<b[n][m]<<'\t';
                  }
                  cout<<'\n';
                 }
                 return 0;
                }




30.             #include <iostream>
                using namespace std;
                int z(int m,int n)
                {
                 int r;
                 if (m<n)
                 {
                  r=m;
                  m=n;
                  n=r;
                 }
                 while (r=m%n)
                 {
                  m=n;
                  n=r;
                 }
                 return n;
                }
                int main()
                {
                 int a[8]={26,1007,956,705,574,371,416,517},b[8]={994,631,772,201,262,763,1000,781};
                 int c[8];
                 for (int i=0;i<8;i++)
                 {
                  c[i]=z(a[i],b[i]);
                  cout<<c[i]<<'\t';
                 }
                 return 0;
                }




31.            #include <iostream>
               using namespace std;
               int z(int a[])
               {
                for (int i=0;i<2;i++)
                a[i]=a[i]*a[i];
               }
               int main()
               {
                int b[2]={2,4};
                cout<<b[0]<<'\t'<<b[1]<<'\n';
                z(b);
                cout<<b[0]<<'\t'<<b[1]<<'\n';
                return 0;
               }




32.               #include <iostream>
                  using namespace std;
                  int sort(int a[],int n)
                  {
                   int t;
                   for (int i=0;i<n-1;i++)
                   {
                    for (int k=i+1;k<n;k++)
                    {
                     if (a[i]>a[k])
                     {
                      t=a[i];
                      a[i]=a[k];
                      a[k]=t;
                     }
                    }
                   }
                   } 
                  int main()
                  {
                   int b[]={122,45,34,6,8,7,8,89,8,7},i;
                   int n=sizeof(b)/sizeof(b[0]);
                   sort(b,n);
                   for (i=0;i<n;i++)
                   cout<<b[i]<<'\t';
                   return 0;
                  }



33.          #include <iostream>
             using namespace std;
             int del(int a[],int n)
             {
              for (int i=0;i<n-1;i++)
              {
               if (a[i]==a[i+1])                          //只用比较相邻数据，因为输入数组已经按从小到大顺序排列好 
               {
                for (int k=i;k<n;k++)
                a[k]=a[k+1];                         //删除相邻相同数据，即所有前移一位
                n--;
                i--;                                 
               }
              }
              return n;
             }
             int main()
             {
              int b[]={1,22,22,33,33,44,44,55,55,66};
              int n;
              n=sizeof(b)/sizeof(b[0]);
              n=del(b,n);
              for (int i=0;i<n;i++)
              cout<<b[i]<<'\t';
              return 0;
             }



34.          #include <iostream>
             using namespace std;
             int maxi(int a[3][4])
             {
              int maxx=a[0][0];
              for (int i=0;i<3;i++)
              {
               for (int k=0;k<4;k++)
               {
                if (a[i][k]>maxx)
                maxx=a[i][k];
               }
              }
              return maxx;
              } 
             int main()
             {
              int b[3][4]={{1,3,34,45},{434,3,34,5},{14,43,23,5}};
              cout<<maxi(b);
              return 0;
             }





35.                #include <iostream>
                   using namespace std;
                   int main()
                   {
                    char ch[50];
                    cin>>ch;                    //字符串用cin输入时，遇到空格，回车，输出时都会自动结束 
                    cout<<ch;
                    return 0;
                   }




36.                 #include <iostream>
                    using namespace std;
                    int main()
                    {
                     char ch[10];
                     cin.getline(ch,10);                    //字符串用cin.getline输入时，遇到空格可以正常输出，但长度为数组数-1(是get函数中的数字），因为包含'\0' 
                     cout<<ch;
                     return 0;
                    }



37.            #include <iostream>
               using namespace std;
               int main()
               {
                char a[]={'c','h','i','n','a'};
                cout<<a;
                return 0;
                } 



38.          #include <bits/stdc++.h>
             using namespace std;
             int main()
             {
              char a[50]={"I like "};                     //定义字符串的形式：{“”}or“”or{‘’，‘’，‘’} !!这里定义的字符串长度必须足够!! 
              char b[]={"sleeping"};
              cout<<strcat(a,b)<<'\n';                    //连接字符串 
              cout<<strcpy(a,b)<<'\n';                    //复制b到a中去
              char str[10]="12345",str1[10]="ABCDE",str2[]="abcde";
              strcpy(str1+4,str2+3);                      //把str2字符串第三位以后的内容复制粘贴到str1第四位以后的位置，从此str1字符串，发生改变
              strcat(str,str1+2);                         //把str1字符串第二位以后的内容连接到str后
              cout<<str; 
              return 0;
             }



39.          #include <bits/stdc++.h>
             using namespace std;
             int swap(char a[],char b[])
             {
              char t[80];
              strcpy(t,a),strcpy(a,b),strcpy(b,t);
             }
             int main()
             {
              char a[80],b[80],c[80];
              cin.getline(a,80);
              cin.getline(b,80);
              cin.getline(c,80);
              if (strcmp(a,b)>0)                        //strcmp通过比较字符串ASCII值差值判断大小 
              swap(a,b);
              if (strcmp(a,c)>0)
              swap(a,c);
              if (strcmp(b,c)>0)
              swap(b,c);
              cout<<a<<'\n'<<b<<'\n'<<c;
              return 0;
             }




40.                 #include <bits/stdc++.h>
                    using namespace std;
                    int main()
                    {
                     char a[80];
                     cin.getline(a,80);
                     int i=0;
                     while (a[i])                                     //由于字符串最后为0，因此可以用while来循环 
                     {
                      if (a[i]>='0'&&a[i]<='9')                    //判断是否为数字
                      {
                       strcpy(a+i,a+i+1);                       //用后面的字符串覆盖前面的 
                       i--;                                     //覆盖后保持字符的数字不变 
                      }
                      i++; 
                     }
                     cout<<a;
                     return 0;
                    }





41.            #include <bits/stdc++.h>
               using namespace std;
               int del(char a[],char b[])
               {
                int i=0,flag;
                while (a[i])                   
                {
                 int j=i,k=0;
                 while (a[j]==b[k]&&b[k]!='\0')                //比较母串和子串的相同部分
                 {
                  j++;k++;
                  } 
                 if (b[k]=='\0')                               //如果出现 b[k]=='\0'，证明在前面的循环中有相同部分，对其进行删除
                 {
                  flag=1;
                  strcpy(a+i,a+j);
                  i--;
                  } 
                  i++;
                }
                if (flag)
                return 1;                                          //用1和0代表是否可以找到相同部分 
                else
                return 0;
               }
               int main()
               {
                int n; 
                char a[80],b[80];
                cout<<"输入母串：";
                cin.getline(a,80);
                cout<<"输入想删除的部分：";
                cin.getline(b,80);
                n=del(a,b);                                     //用n判断结果 
                if (n==1)
                cout<<"删除后的结果是："<<a;
                else
                cout<<"不存在可删除部分！";
                return 0;
                } 



42.         #include <bits/stdc++.h>
            using namespace std;
            int main()
            {
             int flag=0;
             char a[80],b[80];
             cin.getline(a,80);                                  //其中b数组用来储存结果 
             for (int i=0,j=0;a[i]!='\0';i++)
             {
              if (!(a[i]>='0'&&a[i]<='9'))                   
              {
               b[j++]=a[i];                                  //如果是字母，就直接复制到b数组去 
               flag=1;                                     //flag=1来表示字母的结束，数字的开始 
              }
              else
              {
               if(flag==1)
               {
                b[j++]='-';
                flag=0;
               }
               b[j++]=a[i];                                    //后续数字直接复制到b中 
              }
              b[j]='\0';
             }
             cout<<b;
             return 0;
            }




43。   #include <iostream>
       #include <fstream>
       using namespace std;
       int main()
       {
        ofstream outfile;
        outfile.open("out.txt");
        int flag=0;
        for (int i=2;i<=100;i++)
        {
         for (int k=2;k<i;k++)
         {
         if(i%k==0)
         flag=1;
         }
         if (flag==0)
         outfile<<i<<endl;
         flag=0;
        }
        return 0;
       }




44.           #include <iostream>
              #include <fstream>
              using namespace std;
              int main()
              {
               ofstream out("out.txt");
               int a,b;
               for(int i=1;i<=26;i++)
               {
                 if (2*i+6*(26-i)==120)
                 out<<i<<" "<<26-i;
               }
               out.close();
               return 0;
              }




45.           #include <iostream>
              #include <fstream>
              using namespace std;
              int main()
              {
               ifstream infile("in.txt");
               ofstream outfile("out.txt");
               int n;
               infile>>n;
               for (int i=1;i<=n;i++)
               {
                for(int j=1;j<=n-i;j++)
                outfile<<" ";
                for(int k=1;k<=2*i-1;k++)
                outfile<<"*";
                outfile<<endl;
               }
               for (int i=1;i<=n-1;i++)
               {
                for (int j=1;j<=i;j++)
                outfile<<" ";
                for (int k=1;k<=2*(n-i-1)+1;k++)
                outfile<<"*";
                outfile<<endl;
               }
               infile.close();
               outfile.close();
               return 0;
              }




46.           #include <bits/stdc++.h>
              #include <fstream>
              using namespace std;
              void fun(char str[])
              {
                /*********Begin**********/
                int i=0;
                while(str[i])
                {
               if(str[i]>='0'&&str[i]<='9')
               {
                strcpy(str+i,str+i+1);
                i--;
               }
                 i++;
                }
                /**********  End  **********/
              }

              int main()
              {
                void xxx();
                char str[40];
                cout<<"请输入字符串"<<endl;
                cin.getline(str,40);
                fun(str);
                cout<<endl<<"删除数字字符之后是"<<str;
                xxx();
                return 0;
              } 

              void xxx()
              {
                ifstream IN("in.txt",ios::in);
                ofstream OUT;
                OUT.open("out.txt",ios::out);
                char k[100];
                IN>>k;
                fun(k);
                OUT<<k<<'\n';
                IN.close();
                OUT.close(); 
              }



47.            #include <fstream>
               using namespace std;
               int main()
               {
                ifstream inf("in.txt",ios::in);
                ofstream outf("out.txt",ios::out);
                int n,s=0;
                inf>>n;
                for (int i=1;i<=n;i++)
                {
                 s+=i;
                }
                outf<<s;
                inf.close();
                outf.close();
                return 0;
               }



48.            #include <fstream>
               using namespace std;
               int main()
               {
                ifstream inf("in.txt",ios::in);
                ofstream outf("out.txt",ios::out);
                int n,s=0;
                inf>>n;
                for (int i=1;i<=n;i++)
                {
                 s+=i;
                }
                outf<<s;
                inf.close();
                outf.close();
                return 0;
               }




49.                 #include <iostream>
                    #include <fstream>
                    using namespace std;
                    void fun(int a[],int m)
                    {
                    /**********Begin**********/
                    int t;
                    for (int i=0;i<m/2;i++)
                    {
                     t=a[i];
                     a[i]=a[m-i-1];
                     a[m-i-1]=t;
                    }


                    /**********  End  **********/
                     }

                    int main()
                    {
                     void xxx();
                     int i;
                     int a[10]={12,34,54,13,15,16,56,45,3,5};
                     cout<<"原数组是";
                     for(i=0;i<10;i++)
                       cout<<a[i]<<" ";
                      fun(a,10);
                      cout<<endl<<"逆序数组";
                     for(i=0;i<10;i++)
                      cout<<a[i]<<" ";
                     xxx();
                    return 0;
                    }

                    void xxx()
                    {
                      ifstream IN("in.txt",ios::in);
                      ofstream OUT;
                      OUT.open("out.txt",ios::out);
                      int iIN[10],i;
                      for(i=0;i<10;i++)    
                      {   
                        IN>>iIN[i];
                      }
                      fun(iIN,10);
                      for(i=0;i<10;i++)    
                      {   
                        OUT<<iIN[i]<<'\n';
                      }
                      IN.close();
                      OUT.close();
                    }



50.                     #include <iostream>
			#include <fstream>
			using namespace std;
			void fun(int a[],int n)
			{
			  /**********Begin**********/
			  int t;
			  for (int i=0;i<n-1;i++)
			  {
				for (int k=0;k<n-i-1;k++)
				{
					if(a[k]>a[k+1])
					{
						t=a[k];
						a[k]=a[k+1];
						a[k+1]=t;
					}
				}
			  }



			  /**********  End  **********/
			}

			int main()
			{
			  void  xxx(); 
			  int a[10]={3,2,13,-1,3,7,10,5,6,11},i;
			  cout<<"排序前原数组为："<<endl;
			  for(i=0;i<10;i++)
			    cout<<a[i]<<" ";
			  fun(a,10);
			  cout<<endl<<"从小到大排序之后数组为："<<endl;
			  for(i=0;i<10;i++)
			    cout<<a[i]<<" ";
			  xxx();
			  return 0;
			}

			void xxx()
			{
			  ifstream IN("in.txt",ios::in);
			  ofstream OUT;
			  OUT.open("out.txt",ios::out);
			  int iIN[10],i;
			  for(i=0;i<10;i++)    
			  {   
			    IN>>iIN[i];
			  }
			  fun(iIN,10);
			  for(i=0;i<10;i++)    
			  {   
			    OUT<<iIN[i]<<'\n';
			  }
			  IN.close();
			  OUT.close();
			}



51.                     #include <iostream>
			#include <fstream>
			using namespace std;
			int main()
			{
				int n,a=1,b=1,c,s=2;
				ifstream infile("in.txt");
				ofstream outfile;
				infile>>n;
				for (int i=3;i<=n;i++)
				{
					c=a+b;
					a=b;
					b=c;
					s+=c;
				}
				outfile<<s;
				infile.close();
				outfile.close();
				return 0;
			}



52.                     /*
			找出2到100之间的所有素数，并保存到out.txt中，每个素数占一行。
			例如：out.txt
			2
			3
			5
			7

			注意：
			1、请勿删除注释语句。 
			2、必须在begin-end之间编程
			3、程序必须调试正确，保证功能正常实现。
			---------------------------------------------------------------------------------------------------*/

			/*******Begin*******/
			#include <bits/stdc++.h>
			using namespace std;
			int main()
			{
				ofstream out;
				out.open("out.txt");
				int flag=1;
				for(int i=2;i<=100;i++)
				{
					for(int k=2;k<i;k++)
					{
						if(i%k==0)
						flag=0;
					}
					if(flag==1)
					out<<i<<endl;
					flag=1;
				}
				out.close();
				return 0;
			 } 
			/*******End*******/



53.                     /* 从in.txt读取整数n,根据n来输出一个图案到out.txt。(n为大于2的整数)(注意：每行*之间没有空格，中间一行第一个*顶头开始）
			如:in.txt
			3 
			则out.txt
			  *
			 ***
			*****
			 ***
			  *
			如:in.txt
			5
			则:out.txt
			    *
			   ***
			  *****
			 *******
			********* 
			 *******
			  *****
			   ***
			    * 

			注意：
			1、请勿删除注释语句。 
			2、必须在begin-end之间编程
			3、程序必须调试正确，保证功能正常实现。
			---------------------------------------------------------------------------------------------------*/

				/**********  Begin  **********/
			#include <bits/stdc++.h>
			using namespace std;
			int main()
			{
				ifstream in;
				ofstream out;
				in.open("in.txt");
				out.open("out.txt");
				int n;
				in>>n;
				for(int i=1;i<=n;i++)                      //前n排 
				{
					for(int k=0;k<n-i;k++)
					out<<" ";
					for(int k=0;k<i;k++)
					out<<"*";
					out<<'\n';
				}
				for(int i=n-1;i>0;i--)
				{
					for(int k=n-i;k>0;k--)
					out<<" ";
					for(int k=i;k>0;k--)
					out<<"*";
					out<<'\n';
				}
				in.close();
				out.close();
				return 0;
			 } 
				/**********   End  ***********/



54.			/*
			编写函数fun用选择排序法对数组进行从小到大排序。
			注意：请勿改动主函数main和其它函数中的任何内容，仅在函数fun的花括号中填入你编写的若干语句
			---------------------------------------------------------------------------------------------------*/
			#include <iostream>
			#include <fstream>
			using namespace std;
			void fun(int a[],int n)
			{
			  /**********Begin**********/
			  int k,t;
			  for(int i=0;i<n;i++)
			  {
				k=i;
				for(int j=i+1;j<n;j++)
				{
					if(a[k]>a[j])
					k=j;
				}
			    if(i!=k)
				{
					t=a[i];
					a[i]=a[k];
					a[k]=t;
				}
			  }
			  /**********  End  **********/
			}

			int main()
			{
			  void  xxx(); 
			  int a[10]={3,2,13,-1,3,7,10,5,6,11},i;
			  cout<<"排序前原数组为："<<endl;
			  for(i=0;i<10;i++)
			    cout<<a[i]<<" ";
			  fun(a,10);
			  cout<<endl<<"从小到大排序之后数组为："<<endl;
			  for(i=0;i<10;i++)
			    cout<<a[i]<<" ";
			  xxx();
			  return 0;
			}

			void xxx()
			{
			  ifstream IN("in.txt",ios::in);
			  ofstream OUT;
			  OUT.open("out.txt",ios::out);
			  int iIN[10],i;
			  for(i=0;i<10;i++)    
			  {   
			    IN>>iIN[i];
			  }
			  fun(iIN,10);
			  for(i=0;i<10;i++)    
			  {   
			    OUT<<iIN[i]<<'\n';
			  }
			  IN.close();
			  OUT.close();
			}






55.                      /*编写函数fun找出一维整型数组元素中最大的值和它所在的下标，最大的值和它所在的下标通过形参传回。
		如：in.txt
		1 2 13 14 23 15 21 60 35 23
		则:out.txt
		max=60，index=7
		注意：请勿改动主函数main和其它函数中的任何内容，仅在Begin和End之间填入你编写的若干语句
		---------------------------------------------------------------------------------------------------*/
		#include <fstream>
		using namespace std; 
		void fun(int a[], int n , int  *max, int  *d )//n为数组a存放的数组个数 
		{
		    /**********  Begin  **********/
			for(int i=0;i<n;i++)
			{
				if(a[i]>*max)
				{
					*max=a[i];
					*d=i;
				}
			 } 
		    /**********   End  ***********/
		}
		int main()
		{ 
			ifstream infile("in.txt",ios::in);//定义输入文件流类对象infile 
			ofstream outfile("out.txt",ios::out);//定义输出文件流类对象outfile
			//infile与cin用法相同，outfile与cout用法相同。 

			int a[20],max,index,n=0;
			while(infile>>a[n])
				n++;

			fun(a,n,&max,&index);

			outfile<<"Max="<<max<<",Index="<<index<<'\n';

			infile.close();
			outfile.close(); 
			return 0;
		}




56.             /* 请编写一个函数fun，用来删除字符串中的所有空格。
		如:in.txt
		asd af aa z67
		则out.txt
		asdafaaz67
		注意：请勿改动主函数main和其它函数中的任何内容，仅在Begin和End之间填入你编写的若干语句 
		---------------------------------------------------------------------------------------------------*/
		#include <fstream>
		#include<string.h>
		using namespace std;
		/**********  Begin  **********/
		int fun(char *str)
		{
			while(*str)
			{
				if((*str)==' ')
				{
					strcpy(str,(str+1));
					continue;
				}
				str++;
			}
		 } 
		/**********   End  ***********/

		int main()
		{
			ifstream infile("in.txt",ios::in);//定义输入文件流类对象infile 
			ofstream outfile("out.txt",ios::out);//定义输出文件流类对象outfile
			//infile、outfile用法与cin、cout一样 

			char str[81];
			while(!infile.eof()) 
			{
				infile.getline(str,81);//读入一行字符串(可以有空格) 
				fun(str);
				outfile<<str<<endl;
			}
			infile.close();
			outfile.close();
			return 0;
		}





57.             /*
		定义函数fun：在n个学生记录中，根据学生的学号，查找该学生对应的成绩，若没有该学号，则返回-1。
		学生的记录由学号和成绩组成，N名学生的数据已在主函数中放入结构体数组s中，要查找的学生学号从文件读入，依次将学生的学号和查找结果存放在输出文件中。
		（用于字符串比较的函数是strcmp）。
		例如in.txt中显示：
		GA09
		GA010
		GA011
		则out.txt中输出：
		GA09 -1
		GA010 -1
		GA011 91
		注意：请勿改动主函数main和其它函数中的任何内容，只能在begin与end之间写代码。
		------------------------------------------------------------------------------------------*/
		#include<iostream>
		#include<cstring>
		#include<fstream>
		using namespace std;
		#define N 16
		struct student
		{   char num[10];
		    int score;
		} ;
		int fun (student stu[],int n, char num[])
		{
		 /**********  Begin  **********/
		  int i=0;
		  bool flag=false;//找到标志 
		  for(i=0;i<n;i++) 
		  {
			if(strcmp(stu[i].num,num)==0)
			{
				flag=true;
				break;		
			}
		  }
		  if(flag==true)
		    return stu[i].score;
		  else
		  return -1; 
		 /**********   End  ***********/

		}

		int main()
		{ ifstream infile("in.txt",ios::in); 
		  ofstream outfile("out.txt",ios::out);
		  student s[N]={{"GA05",85},{"GA03",76},{"GA02",69},{"GA04",85},{"GA01",91},{"GA07",72},{"GA08",64},{"GA06",87},{"GA015",85},{"GA013",91},{"GA012",64},{"GA014",91},{"GA011",91},{"GA017",64},{"GA018",64},{"GA016",72}};
		  int score;
		  char num[10];//保存要查找学号  
		  while(infile>>num)
		  { 
			score=fun(s,N,num);
			outfile<<num<<" "<<score<<endl; 
		  }
		  infile.close();
		  outfile.close();
		  return 0;
		}





58.              /*
		基于下面的main()函数，写出完整的程序，能够编译和运行；
		程序中的输入文件in.txt包含以下数据
		6S
		6Plus
		7S
		7Plus 
		定义类Apple，包括私有成员变量name(string)，包括构造函数和析构函数,使得输出文件out.txt包含以下数据 
		Apple6S
		~Apple6S
		Apple6Plus
		~Apple6Plus
		Apple7S
		~Apple7S
		Apple7Plus
		~Apple7Plus
		提示：程序使用文件实现输入和输出，不可以用 cin 和 cout ； 
		只能在Begin和End之间输入代码，不能改动程序的任何其余部分。 
		---------------------------------------------------------------------------------------------------*/
		#include<string>
		#include<fstream>
		using namespace std;
		ifstream infile("in.txt");
		ofstream outfile("out.txt");
		/******************** Begin ****************/
		class Apple
		{
			private:
				string N;
			public:
				Apple(string name)
				{
					outfile<<"Apple"<<name<<endl;
					N=name;
				}
				~Apple()
				{
					outfile<<"~Apple"<<N<<endl;
				}
		 } ;
		/******************** End ******************/

		int main()
		{
		    if(!infile) return -1;
		    if(!outfile) return -1;

		    string name;
		    while(infile>>name)
		    {
			Apple *pA = new Apple(name);
		       delete pA;
		    }	

		    infile.close();
		    outfile.close();
		    return 0;
		}




59.              /* 回文字符串（指针版）:
		写程序，输入多个字符串，判断输入的字符串是否"回文"，若是回文，输出YES，若不是回文输出NO.
		每个输入的字符串的前端或后端可能包含多个空格，不算作字符串的一部分，不参与判断过程，应该先裁剪掉。
		字符串的内部包含的空格，算作字符串的一部分，要参与判断的过程。
		每个字符串的输入长度（包括所有的空格）不超过100，使用指针pi和pj完成计算过程，定义如下：
		char s[100], *pi, *pj;
		输入包括多个用例，每个用例包含一个字符串（前端或后端或内部可能包含多个空格，字符串的长度不超过100），以换行作为字符串的结束。
		判断输入的字符串是否"回文"，若是回文，输出YES，若不是回文输出NO，以换行结束。
		如：in.txt
		abc  cba
		      abc 12321 cba
		      abc 1221 cba
		abc 123321 cba
		abc 123321  cba
		则:out.txt
		YES
		YES
		YES
		YES
		NO
		注意：请勿改动主函数main和其它函数中的任何内容，仅在Begin和End之间填入你编写的若干语句
		---------------------------------------------------------------------------------------------------*/
		#include <fstream>
		#include <iostream>
		#include <string.h>
		using namespace std;

		int main()
		{
			ifstream file_in("in.txt");
			ofstream file_out("out.txt"); 
			if(!file_in||!file_out) return -1;
			streambuf *std_in;  
			streambuf *std_out;
			std_in= cin.rdbuf(file_in.rdbuf());  
			std_out= cout.rdbuf(file_out.rdbuf());  

			char s[100], *pi, *pj;
			int  n;
			while(cin.getline(s,100))
			{
		/********************************* Begin ****************************/
				n=strlen(s);
				pi=s;pj=s+n-1;
				while(*pi==' ')
				{
					pi++;
				}
				while(*pj==' ')
				{
					pj--;
				}
				while((pi<pj)&&(*pi==*pj))
				{
					pi++;pj--;
				}
				if(pi<pj)
				cout<<"NO"<<endl;
				else
				cout<<"YES"<<endl;
		/********************************* End ******************************/
			}

			file_in.close();
			file_out.close();
			cin.rdbuf(std_in); 
			cout.rdbuf(std_out);	
			return 0;
		}




60.              /*删除升序数组中的重复元素（指针版）
		编写程序，删除一维数组中所有相同的数，只保留一个，数组中的数已按由小到大的顺序排列，
		int unique(int *pArr,int num)
		pArr和num分别为数组首地址和数组元素的个数，函数返回删除重复元素之后数组中元素个数。
		如：in.txt
		2 2 2 3 4 4 5 6 6 6 6 7 7 8 9 9 10 10 10
		则：out.txt
		2 3 4 5 6 7 8 9 10
		注意：请勿改动主函数main和其它函数中的任何内容，仅在Begin和End之间填入你编写的若干语句
		---------------------------------------------------------------------------------------------------*/
		#include <fstream>
		#include <iostream>
		using namespace std;
		int unique(int *pArr,int num)
		{
		/********************************** Begin ****************************/
		int *p;
		p=pArr;
		for(int i=0;i<num-1;i++)
		{
			if(pArr[i]!=pArr[i+1])
			{
				p++;
				*p=pArr[i+1];
			}
		 } 
		 return p-pArr+1;
		/********************************** End ******************************/
		}
		int main()
		{
			ofstream file_out("out.txt"); 
			if(!file_out) return -1;
			streambuf *std_out;
			std_out= cout.rdbuf(file_out.rdbuf());  

			int a[]={2,2,2,3,4,4,5,6,6,6,6,7,7,8,9,9,10,10,10};
			int num1 = sizeof(a)/sizeof(int);
			int num2 = unique(a,num1);

			cout<<a[0];
			for (int i=1;i<num2;i++)
			{
				cout<<" "<<a[i];
			}
			cout<<'\n';

			file_out.close();
			cout.rdbuf(std_out);	
			return 0;
		}





61.		#include <iostream.h>
		#include "common.h"

		//在头文件中定义了结构体Etype
		char 	Name[10];//	姓名
			float 	CP;//计算机基础
			float 	DS;	//数据结构
			float 	PG;//程序设计
			float 	AV;//平均成绩
		void Record_Add(EType& record)
		{
			cout << "\n\t\t\t 请输入学生学号:";
			cin >> record.ID;
			cout << "\n\t\t\t 请输入学生姓名:";
			cin >> record.Name;
			cout << "\n\t\t\t 请输入计算机基础成绩:";
			cin >> record.CP;
			cout << "\n\t\t\t 请输入数据结构成绩:";
			cin >> record.DS;
			cout << "\n\t\t\t 请输入程序设计成绩:";
			cin >> record.PG;

			record.AV = (record.CP + record.DS + record.PG) / 3;
		}

		void Choose(char j)
		{
			unsigned k, searchkey;
			EType x;

			switch (j)
			{
			case '1'://显示线性表
				system("cls");           //清屏功能
				AppList.DisplaySimpleChainList(AppList);
				system("pause");         //按任意键继续功能
				system("cls");
				break;

			case '2'://插入元素
				system("cls");
				AppList.DisplaySimpleChainList(AppList);
				cout << "\n\t 下标范围: 0---" << AppList.LengthSimpleChainList() << endl;
				printf("\n\t请输入要插入点的下标:");
				scanf("%d",&k);
				fflush(stdin);            //清空缓冲区
				if (k<0 || k>AppList.LengthSimpleChainList())
				{
					cout << "\n" << re_choose << endl;
					system("pause");
					system("cls");
					break;
				}
				Record_Add(x);            //接下来输入元素各项,便于后续插入
				if (AppList.InsertElementSimpleChainList(k, x))
				{
					printf("插入成功!\n\n");
					AppList.DisplaySimpleChainList(AppList);
					SavetoFile();
				}
				else
				{
					printf("插入失败!\n\n");
				}
				system("pause");
				system("cls");
				break;

			case '3'://删除元素
				system("cls");
				AppList.DisplaySimpleChainList(AppList);
				cout << "\n\t 下标范围: 1---" << AppList.LengthSimpleChainList() << endl;
				printf("\n\t请输入要删除数据元素的下标:");
				scanf("%d",&k);
				fflush(stdin);
				if (k<1 || k>AppList.LengthSimpleChainList())
				{
					cout << "\n" << re_choose << endl;
					system("pause");
					system("cls");
					break;
				}
				if (AppList.DeleteElementSimpleChainList(k))
				{
					printf("删除成功!\n\n");
					AppList.DisplaySimpleChainList(AppList);
					SavetoFile();
				}
				else
				{
					printf("删除失败!\n\n");
				}
				system("pause");
				system("cls");
				break;

			case '4'://查找元素
				system("cls");
				SimpleChainNode<ElementType>* p;
				AppList.DisplaySimpleChainList(AppList);
				printf("\n\t请输入要查找的学生号:");				
				scanf("%d",&searchkey);
				fflush(stdin);
				p = AppList.SearchElementSimpleChainList(searchkey);
				if (p)
				{
					printf("查找成功!\n\n");
					AppList.GetElementSimpleChainList(p, result);
				}
				else
				{
					printf("\n查找失败!\n\n");			
				}
				system("pause");
				system("cls");
				break;

			case '5'://取表中第k个元素
				AppList.DisplaySimpleChainList(AppList);
				cout << "\n\t 下标范围: 1---" << AppList.LengthSimpleChainList() << endl;
				printf("\n\t请输入要取出数据元素的序号:");				
				scanf("%d",&k);
				fflush(stdin);
				if (k<1 || k>AppList.LengthSimpleChainList())
				{
					cout << "\n" << re_choose << endl;
					system("pause");
					system("cls");
					break;
				}
				if (AppList.GetElementSimpleChainList(k + 1, result))
				{
					printf("获取成功!\n\n");
					AppList.DisplayElementSimpleChainList(result);
				}
				else
				{
					printf("\n取出失败!\n\n");
				}
				system("pause");
				system("cls");
				break;

			case '0'://结束程序
				exit(0);
				break;

			default:
				cout << re_choose << endl;
				system("pause");
				system("cls");
				break;
			}
		}


		void Menu()              //菜单
		{
			cout << "\n\t\t" << "选择功能:" << endl;
			cout << "\n\t\t" << "1.显示线性表元素" << endl;
			cout << "\t\t" << "2.插入元素" << endl;
			cout << "\t\t" << "3.删除元素" << endl;
			cout << "\t\t" << "4.查找元素" << endl;
			cout << "\t\t" << "5.取出元素" << endl;
			cout << "\t\t" << "0.结束程序" << endl;
			cout <<"\t\t===============================\n"<<endl;	
		}


		int main()
		{
			char a[100];
			system("cls");
			Menu_name();
			system("pause");
			system("cls");
			int MaxSize=MaxListSize;
			HeadType ClassInformation = { "信息2004/01",100,"理" };
			AppList.PutValueSimpleHeadNode(ClassInformation);
			InitWriteRecord();
			ReadRecord();

			while (1)
			{
				system("cls");
				Menu();
				printf("\n\t请输入功能编号:");
				gets(a);
				if (a[1] != '\0')
				{
					cout << "\n" << re_choose << endl;
					system("pause");
					system("cls");
					continue;
				}
				else
				{
					if (a[0] == '0')
						break;
					Choose(a[0]);
				}
			}
			return 0;
		}
		





62.		#pragma once               //定义结构体
		#define STUDENT ElementType

		#define HEADSTUDENT  HeadType
		#define STUDENT	ElementType
		#define ID           key
		#define name         key1

		class HEADSTUDENT
		{
		public:
			char nameclass[20];
			int  number;
			char place[20];
		};

		class STUDENT
		{
		public:
			int   ID;
			char  Name[10];
			float CP;
			float DS;
			float PG;
			float AV;
		};




63.		#include <stdio.h>
		#include <conio.h>
		#include <stdlib.h>
		#include "AppData_LinearList.h"
		#include "linearlist_Class.h"
		#include <iostream>
		#include <cstring>
		#include <stdio.h>
		#include <string.h>

		#define MaxListSize 20

		#define TRUE  1
		#define FALSE 0
		#define OK    1
		#define ERROR 0
		typedef bool Status;

		STUDENT student[MaxListSize];
		typedef STUDENT EType;
		ElementType newvalue, result;
		SimpleChainList<HeadType, ElementType> AppList;
		char re_choose[] = { "\n请输入正确编号...\n" };

		void Menu_name()          //作者信息
		{
			printf("\n\n\n\n\n\n\n");
			printf("              *************************************************\n");
			printf("                           学生成绩单的线性表顺序存储\n\n");
			printf("                           制作:小曹\n");
			printf("                           班级:2004班\n");
			printf("                           学号: 6666\n");
			printf("                           指导老师: 孙夫雄\n");
			printf("              **************************************************\n");
			printf("\n\n\n\t\t");
		}

		void SavetoFile()
		{
			FILE* f;
			int numwrite;
			ElementType result;
			f = fopen("学生成绩表.dat", "w+");
			if (f == NULL)
			{
				printf("文件打开失败!");
				return;
			}
			for (int i = 1; i <= AppList.LengthSimpleChainList(); i++)
			{
				AppList.GetElementSimpleChainList(i, result);
				numwrite = fwrite(&result, sizeof(STUDENT), 1, f);
			}
			fclose(f);
		}

		void InitWriteRecord()
		{
			int ID[4] = { 1000,1001,1002,1003 };
			char name[10][10] = { "老大","老二","老三","老四" };
			float CP[4] = { 90.0,80.0,70.0,60.0 };
			float DS[4] = { 90.0,80.0,70.0,60.0 };
			float PG[4] = { 90.0,80.0,70.0,60.0 };
			float AV[4] = { 90.0,80.0,70.0,60.0 };

			for (int i = 0; i < 4; i++)
			{
				student[i].ID = ID[i];
				strcpy(student[i].Name, name[i]);
				student[i].CP = CP[i];
				student[i].DS = DS[i];
				student[i].PG = PG[i];
				student[i].AV = AV[i];
			}
			FILE* f;
			int numwrite;

			f = fopen("学生成绩表.dat", "w+");
			if (f == NULL)
			{
				printf("文件打开失败!");
				return;
			}
			for (i = 0; i < 4; i++)
				numwrite = fwrite(&student[i], sizeof(STUDENT), 1, f);
			fclose(f);
		}

		void ReadRecord()
		{
			ElementType newvalue;
			FILE* f;
			f = fopen("学生成绩表.dat", "r+");
			if (f == NULL)
			{
				printf("文件打开失败!");
				return;
			}
			int i = 0;
			while (fread(&newvalue, sizeof(newvalue), 1, f))
			{
				AppList.InsertElementSimpleChainList(0, newvalue);
			}
			fclose(f);
		}




64.		#pragma once                          //设置线性表操作
		#include <iomanip>
		template<class HeadType>class SimpleHeadNode;
		template<class HeadType,class ElementType>class SimpleChainList;



		template<class ElementType>           //*****!模板,其中ElementType的类型可以随意改变,SimpleChainNode<ElementType>为类型,相当于int
		class SimpleChainNode                 //简单链表数据元素结点结构类定义
		{
		public:
			ElementType data;
			SimpleChainNode <ElementType>* link;
		};

		template<class HeadType>              //模板,解释同上
		class SimpleHeadNode                  //简单链表表头数据元素结点结构类定义
		{
		public:
			HeadType Hdata;
			SimpleChainNode <class ElementType>* first;
		};





		template<class HeadType,class ElementType>
		class SimpleChainList                 //线性表链式存储结构 - 简单链表模板类的定义
		{
		public:
			SimpleChainList();
			~SimpleChainList();               //析构函数
			int LengthSimpleChainList() const;//简单链表长度
			void PutValueSimpleHeadNode(HeadType& headValue)
			{
				HeadPtr->Hdata = headValue;    //已知值headValue给表头结点Hdata域赋值
			};
			SimpleHeadNode<HeadType>* GetHeadPtrSimpleChainList()
			{
				return HeadPtr;                //返回链表表头的指针HeadPtr
			};
			SimpleChainNode<ElementType>* GetFirstPtrSimpleChainList()
			{
				return HeadPtr->first;         //获取简单链表中第一个结点指针first值
			};

			//1.查找
			//①简单链表中查找第k个元素，存入result中，多态函数
			bool GetElementSimpleChainList(int k, ElementType& result); 
			//②简单链表中查找current指针所指的数据元素，存入result中，多态函数
			bool GetElementSimpleChainList(SimpleChainNode<ElementType>* current,ElementType &result);
			//③查找关键字值为searchkey(数值型)的元素，返回元素位置（指针）
			SimpleChainNode<ElementType>* SearchElementSimpleChainList(int searchkey);
			//④查找关键字值为searchkey(字符型)的元素，返回元素位置（指针）
			SimpleChainNode<ElementType>* SearchElementSimpleChainList(char* searchkey);

			//2.插入,删除
			//①插入：插入值为newvalue元素到简单链表中第k个数据元素之后
			bool InsertElementSimpleChainList(int k, ElementType& newvalue);
			//②插入元素：插入值为newvalue元素到简单链表中InsertPtr指针所指数据元素之前
			bool InsertElementFrontSimpleChainList(ElementType& newvalue, SimpleChainNode<ElementType>* InsertPtr);
			//③删除元素：删除简单链表中第k个数据元素（多态函数）
			bool DeleteElementSimpleChainList(int k);
			//④删除元素：删除简单链表中DeletePtr指针所指数据元素（多态函数）
			bool DeleteElementSimpleChainList(SimpleChainNode<ElementType>* DeletePtr);

			//3.应用
			//① 删除简单链表中所有数据结点，并释放结点空间。保留表头结点
			void DestroyElementSimpleChainList();
			//②显示输出链表的所有数据元素的值
			void DisplaySimpleChainList(SimpleChainList<HeadType, ElementType>& AppList);
			//③显示输出链表的数据元素result的值
			void DisplayElementSimpleChainList(ElementType result);
		private:
			SimpleHeadNode<HeadType>* HeadPtr;
		};




		//1.构造函数
		template<class HeadType,class ElementType>
		SimpleChainList<HeadType, ElementType>::
		SimpleChainList()                     //构造函数:定义线性表空间大小MaxSize、申请元素空间element、定义线性表长度初值length
		{
			HeadPtr = new SimpleHeadNode<HeadType>;
			HeadPtr->first = NULL;
		}


		//2.析构函数
		template<class HeadType,class ElementType>
		SimpleChainList<HeadType,ElementType>::
		~SimpleChainList()                    //析构函数:删除链表中所有数据结点及表头结点，并释放结点空间
		{
			SimpleChainNode<ElementType>* current;
			current = HeadPtr->first;
			while (HeadPtr->first)            // 删除链表中所有数据结点，并释放结点空间
			{
				current = current->link;
				delete HeadPtr->first;
				HeadPtr->first = current;
			}                                 //从链表头部开始删除,一直到尾部指向NULL
			delete HeadPtr;                   //再删除最后一个结点
		}


		//3.表长函数
		template<class HeadType,class ElementType>
		int SimpleChainList<HeadType, ElementType>::
		LengthSimpleChainList() const        //求简单链表中数据元素结点数（链表长度）
		{
			SimpleChainNode<ElementType>* current = HeadPtr->first;
			int len = 0;
			while (current)
			{
				len++;
				current = current->link;
			}
			return len;
		}


		//4.取第k元素
			//①
		template<class HeadType,class ElementType>
		bool SimpleChainList<HeadType,ElementType>::
		GetElementSimpleChainList(int k, ElementType& result) //简单链表第k个元素值取至result中带回,如不存在返回false，存在返回true
		{
			if (k < 1)
				return false;
			SimpleChainNode<ElementType>* current = HeadPtr->first;
			int i = 1;
			while (i < k && current)
			{
				current = current->link;
				i++;
			}
			if (current)
			{
				result = current->data;
				return true;
			}
			return false;
		}

			//②
		template<class HeadType,class ElementType>
		bool SimpleChainList<HeadType,ElementType>::
		GetElementSimpleChainList(SimpleChainNode<ElementType>* current, ElementType& result)//简单链表第current个元素值取至result中带回。如不存在返回false，存在返回true
		{
			if (!current)
				return false;
			result = current->data;
			return true;
		}


		//5.查找
			//①
		template<class HeadType,class ElementType>
		SimpleChainNode<ElementType> *SimpleChainList<HeadType,ElementType>:: //这里的SimpleChainNode<ElementType>相当于前面的int
		SearchElementSimpleChainList(int searchkey)                           // 简单链表中查找数据元素关键字为searchkey(数值型)的元素.如果找到返回元素所在的地址；如果未找到返回NULL 
		{
			SimpleChainNode<ElementType>* current = HeadPtr->first;
			while (current && current->data.key != searchkey)
			{
				current = current->link;
			}
			if (current)
				return current;
			else
				return NULL;
		}

			//②
		template<class HeadType, class ElementType>
		SimpleChainNode<ElementType>* SimpleChainList<HeadType, ElementType>:: //这里的SimpleChainNode<ElementType>相当于前面的int
		SearchElementSimpleChainList(char searchkey[])                         // 简单链表中查找数据元素关键字为searchkey(字符型)的元素.如果找到返回元素所在的地址；如果未找到返回NULL 
		{
			SimpleChainNode<ElementType>* current = HeadPtr->first;
			while (current && !strcmp(current->data.key,searchkey ))
			{
				current = current->link;
			}
			if (current)
				return current;
			else
				return NULL;
		}


		//6.插入
			//①
		template<class HeadType,class ElementType>
		bool SimpleChainList<HeadType,ElementType>::
		InsertElementSimpleChainList(int k, ElementType& newvalue)  //在简单链表中第k个数据元素之后中插入新元素（值为newvalue),如果不存在第k个元素，则返回false
		{
			if (k < 0)
				return false;
			int i = 1;
			SimpleChainNode<ElementType>* current = HeadPtr->first;
			while (i < k && current)
			{
				i++;
				current = current->link;
			}
			if (k > 0 && !current)
				return false;
			SimpleChainNode<ElementType>* q = new SimpleChainNode<ElementType>;
			q -> data = newvalue;
			if (k)
			{
				q->link = current->link;       //q指向current的下一位,current指向q,完成插入操作
				current->link = q;
			}
			else                               // 作为第一个元素结点插入,找头结点操作
			{
				q->link = HeadPtr->first;
				HeadPtr->first = q;
			}
			return true;
		}

			//②
		template<class HeadType,class ElementType>
		bool SimpleChainList<HeadType,ElementType>::
		InsertElementFrontSimpleChainList(ElementType& newvalue, SimpleChainNode<ElementType>* InsertPtr)  // 在简单链表中InsertPtr指针所指数据元素之前中插入新元素（值为newvalue）
		{
			if (!InsertPtr)
				return false;
			SimpleChainNode<ElementType>* current = HeadPtr->first;
			if (InsertPtr != HeadPtr->first)         //InsertPtr不是头结点指针时，推进指针current直到current=InsertPtr，查找结点
			{
				while (current && current->link != InsertPtr)
				{
					current = current->link;
				}
				if (!current)
					return false;                   //查找失败，不存在此结点
			}
			//查找到相应结点,开始执行插入操作
			SimpleChainNode<ElementType>* q = new SimpleChainNode<ElementType>;//申请新数据空间
			q->data = newvalue;                                                //赋值
			if (InsertPtr == HeadPtr->first)                                   // InsertPtr== HeadPtr->first时，作为第一个元素结点插入
			{
				q->link = HeadPtr->first;
				HeadPtr->first = q;
			}
			else                                                               // InsertPtr！= HeadPtr->first时，插入在current 之后
			{
				q->link = current->link;
				current->link = q;
			}
			return true;
		}


		//7.删除
			//①
		template<class HeadType,class ElementType>
		bool SimpleChainList<HeadType,ElementType>::
		DeleteElementSimpleChainList(int k)                                  // 在简单表中删除第k个数据元素,如果不存在第k个元素返回false  
		{
			if (k < 1 || !HeadPtr->first)
				return false;
			SimpleChainNode<ElementType>* current = HeadPtr->first;
			if (k == 1)                                                      // 删除的是链表中第一个结点
			{
				HeadPtr->first = current->link;
			}
			else
			{
				SimpleChainNode<ElementType>* q = HeadPtr->first;
				for (int i = 1; i < k - 1 && q; i++)                         // q 指向第k-1个结点
				{
					q = q->link;                                             
				}
				if (!q || !q->link)                                          //q为空时：不存在第k-1个结点；q->link为空时：不存在第k个结点
					return false;
				current = q->link; 
				q->link = current->link;                                     //即指针跳过了q->link结点
			}
			delete current;
			return true;
		}

			//②
		template<class HeadType,class ElementType>
		bool SimpleChainList<HeadType,ElementType>:: 
		DeleteElementSimpleChainList(SimpleChainNode<ElementType>* DeletePtr) // 在简单表中删除DeletePtr指针所指数据元素,如果不存在返回false
		{
			if (!HeadPtr->first)
				return false;
			if (DeletePtr == HeadPtr->first)                                  //删除的是链表中第一个结点
			{
				HeadPtr->first = DeletePtr->link;
				return true;
			}
			else
			{
				SimpleChainNode<ElementType>* q = HeadPtr->first;
				while (q->link != DeletePtr && q)
				{
					q = q->link;
				}
				if (!q)
					return false;
				q->link = DeletePtr->link;                                     //跳过要删除的结点
				delete DeletePtr;
			}
			return true;
		}


		//8.输出
			//①
		template<class HeadType,class ElementType>
		void SimpleChainList<HeadType, ElementType>::
		DisplayElementSimpleChainList(ElementType result)                        // 输出简单链表中的数据元素，此算法不属于模板类SimpleChainList
		{

		}

			//②
		template<class HeadType, class ElementType>
		void SimpleChainList<HeadType, ElementType>::
		DisplaySimpleChainList(SimpleChainList<HeadType,ElementType> &AppList)  // 输出简单链表中的所有数据元素，此算法不属于模板类SimpleChainList
		{
			SimpleChainNode<ElementType>* current;
			SimpleHeadNode<HeadType>* HeadPtr;
			HeadPtr = AppList.GetHeadPtrSimpleChainList();

			cout << "-----表头结点信息------" << endl;
			cout << " 班级     人数    教室" << endl;
			cout << HeadPtr->Hdata.nameclass << "  "
				<< HeadPtr->Hdata.number << "人  "
				<< HeadPtr->Hdata.place << endl;
			cout << "-----------------------" << endl;
			//////////////////////////////////////////////
			current = HeadPtr->first;
			cout << "HeadPtr->first--》";
			while (current)
			{
				current = current->link;
				cout << "link" << "--->";
			}
			cout << "NULL" << endl;
			//////////////////////////////////////////////
			current = HeadPtr->first;
			cout << "                  ";
			while (current)
			{
				cout<< current->data.ID << "    ";
				current = current->link;
			}
			cout << endl;
			///////////////////////////////////////////////
			current = HeadPtr->first;
			cout << "                  ";
			while (current)
			{
				cout << current->data.Name << "    ";
				current = current->link;
			}
			cout << endl;
			/////////////////////////////////////////////////
			current = HeadPtr->first;
			cout << "                  ";
			while (current)
			{
				cout << current->data.CP << "      ";
				current = current->link;
			}
			cout << endl;
			/////////////////////////////////////////////////
			current = HeadPtr->first;
			cout << "                  ";
			while (current)
			{
				cout << current->data.DS << "      ";
				current = current->link;
			}
			cout << endl;
			/////////////////////////////////////////////////
			current = HeadPtr->first;
			cout << "                  ";
			while (current)
			{
				cout << current->data.PG << "      ";
				current = current->link;
			}
			cout << endl;
			/////////////////////////////////////////////////
			current = HeadPtr->first;
			cout << "                  ";
			while (current)
			{
				cout << current->data.AV << "      ";
				current = current->link;
			}

			cout << endl << endl << endl;
		}





65.		#pragma once
		#define STUDENT ElementType 
		class STUDENT
		{
		public:
			char number[10];
			char name[8];
			char sex[3];
			int age;
			char place[20];
		};





66.		#pragma once
		template <class ElementType>
		class LinearList
		{
		public:
			LinearList(int MaxListSize = 10);                                      //构造函数
			~LinearList() { delete[]element; };                                    //析构函数,释放空间
			int LengthLinearList() { return length; };                             //返回线性表长
			bool GetElementAddressLinearList() { return element; };                //返回线性表元素首地址
			bool GetElementLinearList(int k, ElementType& result)                  //查找第k元素,存储到result中
			int SearchElementLinearList(char *searchkey);                          //查找值为searchkey(字符型)的元素,返回地址
			int SearchElementLinearList(int searchkey);                            //查找值为searchkey(数值型)的元素,返回地址
			bool InsertElementLinearList(int k, ElementType& newvalue);            //将newvalue元素插入到第k元素后
			bool DeleteElementLinearList(int k);                                   //删除第k元素
			void DisplayElementLinearList(ElementType result);                    //显示数据元素
			void DisplayLinearList(LinearList<ElementType>& AppList);              //显示线性表
		private:
			ElementType* element;
			int length;
			int MaxSpaceSize;
		};

		template<class ElementType>
		LinearList <ElementType>::LinearList(int MaxListSize)                        //构造函数
		{
			MaxSpaceSize = MaxListSize;
			element = new ElementType[MaxSpaceSize];                                //申请内存空间
			length = 0;
		}

		template<class ElementType>
		bool LinearList<ElementType>::GetElementLinearList(int k, ElementType& result)
		{
			if (k<1 || k>length)                                                    //查找第k元素
				return false;
			result = element[k - 1];
			return true;
		}

		template<class ElementType>
		int LinearList<ElementType>::SearchElementLinearList(char* searchkey)
		{
			for (int i = 1; i < length; i++)
			{
				if (element[i].key == searchkey)
					return i;                                                      //返回下标
			}
			return -1;
		}

		template<class ElementType>
		int LinearList<ElementType>::SearchElementLinearList(int searchkey)
		{
			for (int i = 1; i < length; i++)
			{
				if (element[i].key == searchkey)
					return i;
			}
			return -1;
		}

		template<class ElementType>                                                 //插入
		bool LinearList<ElementType>::InsertElementLinearList(int k, ElementType& newvalue)
		{
			if (k<0 || k>length)          
				return false;
			if (length == MaxSpaceSize)                                             //判断线性表是否已满
				return false;
			for (int i = length; i > k; i--)                                        //线性表元素后移
			{
				element[i + 1] = element[i];
			}
			element[k + 1] = newvalue;
			length++;
			return true;
		}

		template<class ElementType>
		bool LinearList<ElementType>::DeleteElementLinearList(int k)                //删除
		{
			if (k<0 || k>length)
				return false;
			for (int i = k; i < length; i++)
			{
				element[i] = element[i + 1];
			}
			length--;
			return true;
		}

		template<class ElementType>
		void LinearList<ElementType>::DisplayElementLinearList(ElementType result)  //输出元素
		{
			cout << result.number << "     ";
			cout << result.name << "     ";
			cout << result.sex << "     ";
			cout << result.age << "     ";
			cout << result.place << "     ";
		}

		template<class ElementType>
		void LinearList<ElementType>::DisplayLinearList(LinearList<ElementType>& AppList)
		{
			ElementType result;
			cout << "                  number  name  sex  age  place " << endl;
			cout << "                  ------  ----  ---  ---  ----- " << endl;
			for (int i = 1; i < AppList.LengthLinearList(); i++)
			{
				cout << element[i] << endl;
				AppList.GetElementLinearList(i, result);
				cout << "ELEMENT--" << i << ":";
				DisplayElementLinearList(result);
			}
			cout << endl << endl;
		}




67.		
